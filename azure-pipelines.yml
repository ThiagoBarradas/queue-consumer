# - requires:
# https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud
# https://marketplace.visualstudio.com/items?itemName=SimondeLang.sonarcloud-buildbreaker
# https://marketplace.visualstudio.com/items?itemName=gittools.gitversion
# 
# - CI/CD for git flow
# - for linux environment

variables:
  organization: 'barradas'
  solution_path: 'QueueConsumer.sln'
  project_name: 'QueueConsumer'
  project_path: 'QueueConsumer/QueueConsumer.csproj'
  net_version: '6'
  docker_image_name: 'thiagobarradas/queue-consumer'
  docker_registry_account: 'DockerRegistryBarradas'
  execute_test: 'false'
  test_project_base_folder: ''
  test_project_path: ''
  execute_sonarcloud: 'true'
  sonarcloud_project: 'ThiagoBarradas_queue-consumer'
  sonarcloud_organization: 'thiagobarradas-github'
  sonarcloud_account: 'SonarCloudBarradas' 

trigger:
  branches:
    include:
    - release/*  
    - hotfix/*
    - develop
  tags:
    include: 
    - '*'

pr:
  branches:
    include:
    - develop
    - master

pool:
  vmImage: 'ubuntu-latest' 

stages:
- stage: BuildApp
  jobs:
  - job: UpdateBuildVersion
    workspace:
      clean: all
    variables: 
      current_counter: $[counter(variables['Build.SourceBranchName'], 1)]    
    steps:
    - bash: |
        if [[ "$(Build.SourceVersionMessage)" =~ "hotfix/" ]];
        then 
            echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]true"
            echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]hotfix"
        else
            echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]false"
            echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]release"
        fi
        if [[ "$(Build.SourceBranch)" =~ "/hotfix/" ]] ||
           [[ "$(Build.SourceBranch)" =~ "/release/" ]]; 
        then
            echo "Generate Preview Release Version"
            echo "Version: $(Build.SourceBranchName)"
            echo "         $(Build.SourceBranchName)-preview.$(current_counter)"
            echo "##vso[build.updatebuildnumber]$(Build.SourceBranchName)-preview.$(current_counter)"
            echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$(Build.SourceBranchName)"
            echo "##vso[task.setvariable variable=VersionType;isOutput=true]prerelease"
        elif [[ "$(Build.SourceBranch)" =~ "/tags/" ]];
        then
            echo "Generate Release Version"
            echo "Version: $(Build.SourceBranchName)"
            echo "##vso[build.updatebuildnumber]$(Build.SourceBranchName)"
            echo "##vso[task.setvariable variable=SonarMasterWhenTag;isOutput=true]sonar.branch.name=master"
            echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$(Build.SourceBranchName)"
            echo "##vso[task.setvariable variable=VersionType;isOutput=true]latest"
        else
            echo "Generate Development Version"
            echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-develop"
            echo "Version: $(Build.BuildNumber)-develop"
        fi
      displayName: Update Version Number
      name: UpdateBuildVersionTask
    - bash: |
        STAGING_URL="https://dev.azure.com/$(organization)/$(System.TeamProject)/_apis/build/status/$(System.DefinitionId)?branchName=$(UpdateBuildVersionTask.PreviousPrefix)/$(Build.BuildNumber)&stageName=DeployPackage"
        STAGING_RESULT=$`curl --silent $STAGING_URL`
        echo "URL: $STAGING_URL" 
        echo "RESULT: $STAGING_RESULT"
        SUCCEEDED=$`echo $STAGING_RESULT | grep -P 'succeeded' -o | head -n 1`
        if [[ "$STAGING_RESULT" =~ "succeeded" ]];
        then
            echo "$PREVIOUS_PREFIX branch is ok!"
        else
            echo "$PREVIOUS_PREFIX branch is not ok!"
            exit 1
        fi
      condition: contains(variables['Build.SourceBranch'], '/tags/')
      displayName: Break if release/hotfix branch is not passing
      name: BreakIsReleaseOrHotfixIsNotPassing

  - job: Build
    dependsOn: 
    - UpdateBuildVersion
    condition: succeeded()
    workspace:
      clean: all
    steps:
    - script: |
        rm -rf $(System.DefaultWorkingDirectory)/bin
        rm -rf artifact
        mkdir -p artifact  
        pwd && ls -la 
        dotnet restore "$(solution_path)" 
        dotnet publish -c Release -o $(System.DefaultWorkingDirectory)/bin "$(project_path)"
        cp -r $(System.DefaultWorkingDirectory)/bin artifact/bin
        ls artifact/bin
      displayName: Build Application
    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/artifact
        artifact: $(project_name)

  - job: UnitTests
    dependsOn: 
    - UpdateBuildVersion
    - Build
    workspace:
      clean: all
    condition: and(succeeded(), eq(variables['execute_test'], 'true'))
    steps:
    - script: | 
        dotnet tool install --global coverlet.console 
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path . 
        dotnet add $(test_project_path) package coverlet.msbuild
        dotnet add $(test_project_path) package XunitXml.TestLogger
        dotnet test /p:CollectCoverage=true \
                    /p:CoverletOutputFormat=\"opencover,cobertura\" \
                    /p:CoverletOutput=results/result \
                    /p:Exclude=[xunit.*]* "$(solution_path)" \
                    --test-adapter-path:. --logger:"xunit;LogFilePath=results/result.xunit.xml"
        ./reportgenerator "-reports:$(test_project_base_folder)/results/result.opencover.xml" \
                          "-targetdir:$(test_project_base_folder)/results/Cobertura" \
                          "-reporttypes:Cobertura;HTMLInline;HTMLChart"
        echo "##vso[task.setvariable variable=OpencoverSonar;isOutput=true]sonar.cs.opencover.reportsPaths=$(Pipeline.Workspace)/result.opencover.xml"
        ls $(System.DefaultWorkingDirectory)/$(test_project_base_folder)/results
      displayName: Running Unit Tests
      name: UnitTestsTask
    - task: PublishPipelineArtifact@1
      displayName: Store Test Result
      inputs:
        path: $(System.DefaultWorkingDirectory)/$(test_project_base_folder)/results
        artifact: UnitTestResults
    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage 
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: $(System.DefaultWorkingDirectory)/$(test_project_base_folder)/results/result.cobertura.xml
        pathToSources: .
        failIfCoverageEmpty: true
    - task: PublishTestResults@2
      displayName: Publish Test Result
      inputs:
        testResultsFormat: 'XUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/$(test_project_base_folder)/results/result.xunit.xml'
        testRunTitle: 'Collecting Test Results'

  - job: QualityAnalysis
    dependsOn: 
    - UpdateBuildVersion
    - Build
    - UnitTests
    condition: |
      and
      (
        in(dependencies.UpdateBuildVersion.result, 'Succeeded'),
        in(dependencies.Build.result, 'Succeeded', 'Skipped'),
        in(dependencies.UnitTests.result, 'Succeeded', 'Skipped'),
        eq(variables['execute_sonarcloud'], 'true')
      )
    workspace:
      clean: all
    variables:
      SonarMasterWhenTag: $[ dependencies.UpdateBuildVersion.outputs['UpdateBuildVersionTask.SonarMasterWhenTag'] ]
      OpencoverSonar: $[ dependencies.UnitTests.outputs['UnitTestsTask.OpencoverSonar'] ]
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get Test Result
      condition: eq(variables['execute_test'], 'true')
      inputs:
        artifact: UnitTestResults
    - task: SonarCloudPrepare@1
      displayName: Start Sonarqube Analysis
      inputs:
        SonarCloud: '$(sonarcloud_account)'
        organization: '$(sonarcloud_organization)'
        scannerMode: 'MSBuild'
        projectKey: '$(sonarcloud_project)'
        projectName: '$(project_name)'
        extraProperties: |
          sonar.sourceEncoding=UTF-8
          sonar.scm.forceReloadAll=true
          $(OpencoverSonar)
          $(SonarMasterWhenTag)
    - script: |
        dotnet build "$(solution_path)"
      displayName: Runnig Build For Analysis
    - task: SonarCloudAnalyze@1
      displayName: Finish Sonarqube Analysis
    - task: SonarCloudPublish@1
      displayName: Publish Sonarqube Analysis
      inputs:
        pollingTimeoutSec: '300'
    - task: sonarcloud-buildbreaker@2
      inputs:
        SonarCloud: '$(sonarcloud_account)'
        organization: '$(sonarcloud_organization)'

  - job: BuildAndPublishDocker
    dependsOn: 
    - UpdateBuildVersion
    - Build
    - UnitTests
    - QualityAnalysis
    condition: |
      and
      (
        in(dependencies.UpdateBuildVersion.result, 'Succeeded'),
        in(dependencies.Build.result, 'Succeeded', 'Skipped'),
        in(dependencies.UnitTests.result, 'Succeeded', 'Skipped'),
        in(dependencies.QualityAnalysis.result, 'Succeeded', 'Skipped'),
        or
        ( 
          contains(variables['Build.SourceBranch'], '/hotfix/'),
          contains(variables['Build.SourceBranch'], '/release/'),
          contains(variables['Build.SourceBranch'], '/tags/')
        )
      )
    workspace:
      clean: all
    variables:
      Version: '$(Build.BuildNumber)'
      VersionType: $[ dependencies.UpdateBuildVersion.outputs['UpdateBuildVersionTask.VersionType'] ]
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get Application Artifact
      inputs:
        artifact: $(project_name)
    - script: |
        rm -rf bin
        mkdir bin     
        cp -r $(Pipeline.Workspace)/bin/* bin
        ls -la bin
      displayName: Prepare Files
    - task: replacetokens@3
      inputs:
        targetFiles: 'Dockerfile'
        encoding: 'auto'
        writeBOM: true
        verbosity: 'detailed'
        actionOnMissing: 'warn'
        keepToken: true
        tokenPrefix: '__['
        tokenSuffix: ']__'
      displayName: Add Version as Env Var
    - task: Docker@2
      displayName: 'Build and Publish Docker Image'
      inputs:
        containerRegistry: '$(docker_registry_account)'
        repository: '$(docker_image_name)'
        command: 'buildAndPush'
        Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: |
          $(Version)
          $(VersionType)
  
